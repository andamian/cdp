{
    "swagger": "2.0",
    "info": {
        "version": "2.1.0",
        "title": "Credential Delegation Service",
        "description": "The credential delegation web service is used by CADC and CANFAR web services to perform secondary web service operations on behalf of the user. By default, it uses X509 certificates signed by CADC and recognized only within CADC and CANFAR, but the service also allows users to delegate their own certificates signed by other authorities.\n"
    },
    "basePath": "/cred", 
    "paths": {
        "/delegate": {
            "post": {
                "description": "Creates an identity resource (returned in 'location' response header) and a Certificate Signing Request (CSR) that is ready to use.\n",
                "tags": [
                    "Credential Delegation"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "Identity URL",
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "DN",
                        "in": "query",
                        "description": "The distinguished name to delegate",
                        "required": false,
                        "type": "string"
                    }
                ]
            }
        },
        "/delegate/{identity}/CSR": {
            "get": {
                "description": "Get the generated CSR for the identity.\n",
                "tags": [
                    "Credential Delegation"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "title": "The CSR",
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "identity",
                        "in": "path",
                        "description": "The identity value from the Location header response from delegate POST",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/delegate/{identity}/certificate": {
            "put": {
                "description": "Upload the signed certificate.\n",
                "tags": [
                    "Credential Delegation"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "201": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "identity",
                        "in": "path",
                        "description": "The identity value from the Location header response from delegate POST",
                        "required": true,
                        "type": "string"
                    }
                ]
            }
        },
        "/priv": {
            "get": {
                "description": "Get a proxy certificate for the authenticated user making the call. For users with their own (non-CADC) certificate, the user must have a valid delegated certificate in the system. Other users can simply retrieve a CADC-asigned proxy certificate.",
                "tags": [
                    "Proxy Certificate"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "title": "The proxy certificate",
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "daysValid",
                        "in": "query",
                        "description": "The length of time before the proxy certificate expires.  The maximum time is 30 days.  If not provided (along with {idType}), the user will default to the user who has been authenticated in the request.",
                        "required": false,
                        "default": 30,
                        "type": "float"
                    }
                ]
            }
        },
        "/priv/dn/{X500-distinguished-name}": {
            "get": {
                "description": "Get a proxy certificate for the specified user. Note: Only priviledged system users can get proxy certificates for anyone but themselves so this endpoint is not generally useful.\n",
                "tags": [
                    "Proxy Certificate"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "title": "The proxy certificate",
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "X500-distinguished-name",
                        "in": "path",
                        "description": "An X500 Distinguished Name. The value must be URL encoded because distinguished names may contain spaces and other special characters.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "daysValid",
                        "in": "query",
                        "description": "The length of time before the proxy certificate expires. The maximum time is 30 days.",
                        "required": false,
                        "default": 30,
                        "type": "float"
                    }
                ]
            }
        },
        "/priv/userid/{username}": {
            "get": {
                "description": "Get a proxy certificate for the specified user.  Note: Only priviledged system users can get proxy certificates for anyone but themselves so this endpoint so this endpoint is not generally useful.",
                "tags": [
                    "Proxy Certificate"
                ],
                "schemes": [
                    "https"
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "title": "The proxy certificate",
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal error"
                    },
                    "503": {
                        "description": "Service busy"
                    },
                    "default": {
                        "description": "Unexpeced error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "A CADC/CANFAR username",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "daysValid",
                        "in": "query",
                        "description": "The length of time before the proxy certificate expires. The maximum time is 30 days.",
                        "required": false,
                        "default": 30,
                        "type": "float"
                    }
                ]
            }
        },
        "/availability": {
            "get": {
                "tags": [
                    "Support Interfaces"
                ],
                "summary": "VOSI Availability",
                "description": "Indicates whether the service is operable and the reliability of the service for extended and scheduled requests.\n",
                "description": "Indicates whether the service is operable and shows the reliability of the service for extended and scheduled requests. If the query parameter 'detail=min' is used, a light weight heart beat test will be performed. The heart beat test returns status 200 if the service is available.",
                "parameters": [
                  {
                    "name": "detail",
                    "in": "query",
                    "description": "specifies heart beat to be used to check for availability of this service, the value 'min' must be used, otherwise the full availability test will be performed",
                    "required": false,
                    "type": "string"
                  }
                ],
                "responses": {
                    "200": {
                        "description": "A VOSI availability document in XML.",
                        "schema": {
                            "$ref": "#/definitions/availability"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/capabilities": {
                "get": {
                "summary": "VOSI Capabilities",
                "tags": [
                  "Support Interfaces"
                ],
                "description": "Provides the service metadata in the form of a list of Capability descriptions.  Each of these descriptions is an \nXML element that:\n<ul>\n<li>states that the service provides a particular, IVOA-standard function;</li>\n<li>lists the interfaces for invoking that function;</li>\n<li>records any details of the implementation of the function that are not defined as default or constant in the standard for that function.</li>\n</ul>\n",
                "produces": [
                  "text/xml"
                ],
                "responses": {
                  "200": {
                    "description": "A VOSI Capabilities document in XML.",
                    "schema": {
                      "$ref": "#/definitions/capabilities"
                    }
                  },
                  "500": {
                    "description": "Internal server error"
                  },
                  "503": {
                    "description": "Service too busy"
                  },
                  "default": {
                    "description": "Unexpected error",
                    "schema": {
                      "$ref": "#/definitions/Error"
                    }
                  }
                }
            }
        }
    },
    "definitions": {
        "availability": {
            "type": "object",
            "xml": {
                "name": "availability",
                "namespace": "http://www.ivoa.net/xml/VOSIAvailability/v1.0",
                "prefix": "vosi"
            },
            "properties": {
              "available": {
                "type": "boolean",
                "xml": {
                  "attribute": true,
                  "prefix": "vosi"
                }
              },
              "note": {
                "type": "string",
                "xml": {
                  "attribute": true,
                  "prefix": "vosi"
                }
             }
          }
        },
        "capabilities": {
            "type": "object",
            "xml": {
                "namespace": "http://www.ivoa.net/xml/VOSICapabilities/v1.0",
                "prefix": "vosi",
                "wrapped": true
            }
        },
        "Error": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}
